# -*- coding: utf-8 -*-
"""LVADSUSR92-kamalakannan-lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11kJl2NmeWkaT5Sn0qvTIG90qV0ynntBb
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix
import warnings
warnings.filterwarnings("ignore")

df = pd.read_csv('booking.csv')
df.columns

df

#Handling Missing Values
df.isnull().sum()

#Handling Outliers
Q1 = df['average price'].quantile(0.25)
Q3 = df['average price'].quantile(0.75)
IQR = Q3 - Q1
lower_limit = Q1 - (1.5*IQR)
upper_limit = Q3 + (1.5*IQR)
df = df[~(df['average price'] < lower_limit) | (df['average price'] > upper_limit)]



#Visualisation
plt.figure(figsize = (6,6), dpi = 150)
sns.histplot(data = df, x ='average price',hue = 'market segment type',kde = True)

plt.figure(figsize = (8,7), dpi = 150)
sns.boxplot(data = df, y = 'average price', x = 'booking status',hue ='market segment type' )

df.drop(columns=['type of meal','car parking space'],inplace = True)

df.drop(columns=['P-C', 'P-not-C'],inplace = True)

lb = LabelEncoder()
df['room type'] = lb.fit_transform(df['room type'])
df['market segment type'] = lb.fit_transform(df['market segment type'])
df['booking status'] = lb.fit_transform(df['booking status'])



df

df.drop(columns=['Booking_ID'],inplace = True)

df.drop(columns=['date of reservation'],inplace = True)

#Feature Selection
X = df.drop('booking status', axis=1)
y = df['booking status']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=7)

#Training and Prediciton
model_2= LogisticRegression()
model_2.fit(X_train, y_train)
y_pred = model_2.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy Score:", accuracy)
print("\nClassification Report:")
print(classification_report(y_test, y_pred))
print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))