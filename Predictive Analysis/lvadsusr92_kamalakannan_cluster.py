# -*- coding: utf-8 -*-
"""lvadsusr92_kamalakannan_cluster.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NMbv1s7h27w5fVi9Tqc-WyxLpzXms3GA
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.cluster import KMeans
from sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler
from sklearn.decomposition import PCA
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler
from sklearn.model_selection import train_test_split,cross_val_score
from sklearn.metrics import mean_squared_error, accuracy_score, confusion_matrix, recall_score, f1_score, precision_score,silhouette_score, davies_bouldin_score, calinski_harabasz_score,mean_absolute_error, mean_squared_error, r2_score
import warnings
warnings.filterwarnings("ignore")

df=pd.read_csv('/content/seeds.csv')
df

plt.figure(figsize = (20,13), dpi = 150)
sns.boxplot(df)
plt.show()

#Handling null values and duplicates
n=df.isnull().sum()
print('Null values in the dataset:\n',n)
df=df.dropna()
df.interpolate()
dd=df[df.duplicated()]
print('Duplicate rows in the datset:\n',dd)

df.isnull().sum()

q1=df['Asymmetry coefficient'].quantile(0.25)
q3=df['Asymmetry coefficient'].quantile(0.75)
iqr=q3-q1
l_limit=q1-(iqr*1.5)
u_limit=q3+(iqr*1.5)
df=df[(df['Asymmetry coefficient']>l_limit) & (df['Asymmetry coefficient']<u_limit)]

#Describing Data
print('Head of the dataset:\n',df.head())
print('Tail of the dataset:\n',df.tail())
print('Description of the dataset:\n',df.describe())
print('Columns of the dataset:\n',df.columns)
print('Shape of the data:\n',df.shape)
print('Correleation of features:\n',df.corr())

#Viz
sns.heatmap(df.corr(),annot = True)

#Using PCA and MinMaxScaler
l=[]
pca=PCA(n_components=2)
df_pca_scaled=pca.fit_transform(df)
scaler=MinMaxScaler()
df_scaled=scaler.fit_transform(df_pca_scaled)
print(df_scaled)
for i in range(1,11):
  ml=KMeans(n_clusters=i)
  op=ml.fit_predict(df_scaled)
  inertia_score=ml.inertia_
  l.append(inertia_score)
plt.plot(range(1,11),l,marker='o')

ml=KMeans(n_clusters=3)
op=ml.fit_predict(df_scaled)
labels=ml.labels_
centroids=ml.cluster_centers_
plt.scatter(df_scaled[:,0],df_scaled[:,1],c=labels)
plt.scatter(centroids[:,0],centroids[:,1],marker='X',color='r')
plt.title('Clusters Formation')

s=silhouette_score(df_scaled,op)
d=davies_bouldin_score(df_scaled,op)
c=calinski_harabasz_score(df_scaled,op)

print('Silhouette Score:',s)
print('\nDavies Bouldin Score:',d)
print('\ncalinski_harabasz_score:',c)