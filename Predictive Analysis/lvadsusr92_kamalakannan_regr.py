# -*- coding: utf-8 -*-
"""lvadsusr92_kamalakannan_regr.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mSWbYmhrwGotCSNOAJOgsH8Tg3QppiIx
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.cluster import KMeans
from sklearn.impute import SimpleImputer
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler
from sklearn.model_selection import train_test_split,cross_val_score
from sklearn.metrics import mean_squared_error, accuracy_score, confusion_matrix, recall_score, f1_score, precision_score,silhouette_score, davies_bouldin_score, calinski_harabasz_score,mean_absolute_error, mean_squared_error, r2_score
import warnings
warnings.filterwarnings("ignore")

df = pd.read_csv('/content/auto-mpg.csv')
df

df.isnull().sum()

df.fillna(df.mean(),inplace=True)

df.dropna(inplace = True)
df.interpolate()

n = df.isnull().sum()
print(n)
dd=df[df.duplicated()]
dd

plt.figure(figsize = (8,7), dpi = 150)
sns.boxplot(df)
plt.show()

#Describing Data
print('Head of the dataset:\n',df.head())
print('Tail of the dataset:\n',df.tail())
print('Description of the dataset:\n',df.describe())
print('Columns of the dataset:\n',df.columns)
print('Shape of the data:\n',df.shape)
print('Correleation of features:\n',df.corr())

#Viz
sns.heatmap(df.corr(),annot = True)

df.isnull().sum()
df

df.dropna()

# Step 5: Model Training and Testing
# Define features and target variable
value_to_drop = '?'
df = df[df != value_to_drop]
X = df.drop(['mpg', 'car name'], axis=1)
y = df['mpg']
print(X)
# Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Feature Scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train Linear Regression Model
model = LinearRegression()
model.fit(X_train_scaled, y_train)

# Step 6: Model Evaluation
# Predict on test set
y_pred = model.predict(X_test_scaled)
y_pred

# Model Evaluation Metrics
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("Mean Absolute Error:", mae)
print("R-squared:", r2)